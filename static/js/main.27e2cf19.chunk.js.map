{"version":3,"sources":["formValidators.js","components/Inputs.js","App.js","serviceWorker.js","index.js"],"names":["validators","required","val","number","split","join","test","toString","email","Inputs","formMetaData","formInputs","onInputChangeHanlder","onInputBlurHandler","checkIsRequired","rules","isRequired","x","length","rule","inputJSXArr","inputName","inputObj","isValid","isTouched","value","error","push","key","className","label","type","name","onChange","onBlur","renderFormInputs","firstName","message","lastName","phone","App","useState","setFormInputs","validateInput","finalFormInputsState","curValue","getCopiedStateForInput","newFormInputsState","curInputObj","fieldName","baseState","obj","onSubmit","e","preventDefault","localFormIsValid","validateForm","allInputsTouched","alert","console","log","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.27e2cf19.chunk.js","sourcesContent":["const validators = {\r\n    required: val => !!val,\r\n    number: val => {\r\n        val = val.split(' ').join('');\r\n        const re = /(^[+0-9]?)(\\d+)$/g;\r\n        return re.test(val.toString());\r\n    },\r\n    email: val => {\r\n        if(val){\r\n            const re = /(^[a-z]+[!#$%&'*+-/=?^_`{|]?[a-z]+@[a-z]+)(\\.[a-z]{2,})+/gi;\r\n            return re.test(val.toString());\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default validators;","import React from \"react\";\r\nimport validators from \"../formValidators\";\r\n\r\nconst Inputs = ({formMetaData, formInputs, onInputChangeHanlder, onInputBlurHandler}) => {\r\n\r\n    const checkIsRequired = (rules) => {\r\n        let isRequired = false;\r\n        for(let x = 0; x < rules.length; x++){\r\n            if(rules[x].rule === validators.required){\r\n                isRequired = true;\r\n                break;\r\n            }\r\n        }\r\n        return isRequired;\r\n    }\r\n\r\n    const renderFormInputs = () => {\r\n\r\n        const inputJSXArr = [];\r\n\r\n        for(let inputName in formMetaData){\r\n            const inputObj = formMetaData[inputName];\r\n\r\n            const isValid = formInputs[inputName].isValid;\r\n            const isTouched = formInputs[inputName].isTouched;\r\n            const value = formInputs[inputName].value;\r\n            const error = formInputs[inputName].error;\r\n            const isRequired = checkIsRequired(formMetaData[inputName].rules);\r\n\r\n            inputJSXArr.push(\r\n                <div key={inputName} className={'input-wrp'}>\r\n                    <label>{inputObj.label} {isRequired ? <span className={'req-icon'}>*</span> : <span className={'optional'}>( Optional )</span>}</label>\r\n                    {error && isTouched\r\n                        ? <div className={'error-text'}>{error}</div>\r\n                        : null\r\n                    }\r\n                    <input\r\n                        className={!isValid && isTouched ? 'input-error' : ''}\r\n                        type={inputObj.type}\r\n                        name={inputName}\r\n                        onChange={onInputChangeHanlder}\r\n                        onBlur={onInputBlurHandler}\r\n                        value={value}\r\n                    />\r\n                </div>\r\n            )\r\n        }\r\n        return inputJSXArr;\r\n    }\r\n\r\n    return renderFormInputs();\r\n}\r\n\r\nexport default Inputs;","import React, {useState} from 'react';\nimport './normalize.css';\nimport './App.css';\n\nimport validators from \"./formValidators\";\nimport Inputs from './components/Inputs'\n\nconst App = () => {\n    //state\n    const [formIsValid, setFormIsValid] = useState(false);\n    const [formInputs, setFormInputs] = useState({\n        firstName: {\n            value: \"\",\n            isValid: false,\n            isTouched: false,\n            error: \"\",\n        },\n        lastName: {\n            value: \"\",\n            isValid: false,\n            isTouched: false,\n            error: \"\",\n        },\n        phone: {\n            value: \"\",\n            isValid: false,\n            isTouched: false,\n            error: \"\",\n        },\n        email: {\n            value: \"\",\n            isValid: false,\n            isTouched: false,\n            error: \"\",\n        },\n    })\n    ///.\n\n    const validateForm = (finalFormInputsState) => {\n        let localFormIsValid = true;\n        //loop over input objects\n        for(let inputName in finalFormInputsState){\n            //store values\n            const rules = formMetaData[inputName].rules;\n            const curValue = finalFormInputsState[inputName].value;\n\n            const [newFormInputsState, curInputObj] = getCopiedStateForInput(inputName, finalFormInputsState);\n            curInputObj.error = '';\n            curInputObj.isValid = true;\n            finalFormInputsState = newFormInputsState;\n\n            //loop over input object's rules\n            for(let x = 0; x < rules.length; x++){\n                const ruleTest = rules[x].rule(curValue);\n                if(!ruleTest){\n                    //set rule's message if ruleTest failed\n                    curInputObj.error = rules[x].message;\n                    curInputObj.isValid = false;\n                    localFormIsValid = false;\n                    break;\n                }\n            }\n        }\n\n        setFormInputs(finalFormInputsState);\n\n        // we need this value on submit, so there is no need to store it in state\n        return localFormIsValid;\n    }\n\n    const validateInput = (finalFormInputsState, inputName) => {\n\n        const rules = formMetaData[inputName].rules;\n        const curValue = finalFormInputsState[inputName].value;\n\n        const [newFormInputsState, curInputObj] = getCopiedStateForInput(inputName, finalFormInputsState);\n        curInputObj.error = '';\n        curInputObj.isValid = true;\n        for(let x = 0; x < rules.length; x++){\n            const ruleTest = rules[x].rule(curValue);\n            if(!ruleTest){\n                //set rule's message if ruleTest failed\n                curInputObj.error = rules[x].message;\n                curInputObj.isValid = false;\n                break;\n            }\n        }\n\n        setFormInputs(newFormInputsState);\n    }\n\n    const getCopiedStateForInput = (fieldName, baseState) => {\n        baseState = baseState || formInputs;\n        const obj = {\n            ...baseState,\n            [fieldName]: {...baseState[fieldName]}\n        };\n        return [obj, obj[fieldName]];\n    }\n\n    const onInputChangeHanlder = (e) => {\n        const [newFormInputsState, curInputObj] = getCopiedStateForInput(e.target.name);\n        curInputObj.value = e.target.value;\n\n        validateInput(newFormInputsState, e.target.name);\n    }\n\n    const onInputBlurHandler = (e) => {\n        const [newFormInputsState, curInputObj] = getCopiedStateForInput(e.target.name);\n        curInputObj.isTouched = true;\n        //set new state\n        setFormInputs(newFormInputsState);\n        validateInput(newFormInputsState, e.target.name);\n    }\n\n    const allInputsTouched = () => {\n        let finalFormInputsState\n        for(let inputName in formInputs){\n            const [newFormInputsState, curInputObj] = getCopiedStateForInput(inputName, finalFormInputsState);\n            curInputObj.isTouched = true;\n            finalFormInputsState = newFormInputsState;\n        }\n        return finalFormInputsState;\n    }\n\n    const onFormSubmitHandler = e => {\n        e.preventDefault();\n        let finalFormInputsState = allInputsTouched(formInputs);\n        const formIsValid = validateForm(finalFormInputsState);\n\n        if(formIsValid){\n            alert('Form Sent!');\n        } else {\n            console.log('form invalid');\n        }\n    }\n\n\n    return (\n      <div className={\"form-wrp\"}>\n        <form onSubmit={onFormSubmitHandler} className=\"form\">\n            <Inputs\n                formMetaData={formMetaData}\n                formInputs={formInputs}\n                onInputChangeHanlder={onInputChangeHanlder}\n                onInputBlurHandler={onInputBlurHandler}\n            />\n            <button className={'submit-btn'}>Submit</button>\n        </form>\n      </div>\n  );\n}\n\n\n\nconst formMetaData = {\n    firstName: {\n        rules: [\n            {rule: validators.required, message: \"First Name is required\"}\n        ],\n        type: 'text',\n        label: 'First Name',\n    },\n\n    lastName: {\n        rules: [\n            {rule: validators.required, message: \"Last Name is required\"}\n        ],\n        type: 'text',\n        label: 'Last Name',\n    },\n\n    phone: {\n        rules: [\n            {rule: validators.required, message: \"Phone is required\"},\n            {rule: validators.number, message: \"Invalid Phone Number\"},\n        ],\n        type: 'text',\n        label: 'Phone',\n    },\n\n    email: {\n        rules: [\n            {rule: validators.email, message: \"Invalid Email\"}\n        ],\n        type: 'email',\n        label: 'Email',\n    },\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}